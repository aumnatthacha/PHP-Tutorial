<?php
echo "<font color='#330000'><h1>PHP ตัวเลข</h1>";
echo "<font color='#330099'><p>สิ่งหนึ่งที่ควรสังเกตเกี่ยวกับ PHP คือมีการแปลงประเภทข้อมูลโดยอัตโนมัติ</p>";
echo "<font color='#330099'><p>ดังนั้น หากคุณกำหนดค่าจำนวนเต็มให้กับตัวแปร ประเภทของตัวแปรนั้นจะเป็นจำนวนเต็มโดยอัตโนมัติ
จากนั้น หากคุณกำหนดสตริงให้กับตัวแปรเดียวกัน ประเภทจะเปลี่ยนเป็นสตริง</p>";
echo "<font color='#330099'><p>การแปลงอัตโนมัตินี้อาจทำให้รหัสของคุณเสียหายได้ในบางครั้ง</p>";

echo "<font color='#330000'><h1>PHP จำนวนเต็ม</h1>";
echo "<font color='#330099'><p>2, 256, -256, 10358, -179567 เป็นจำนวนเต็มทั้งหมด</p>";
echo "<font color='#330099'><p>จำนวนเต็มคือตัวเลขที่ไม่มีทศนิยม
ชนิดข้อมูลจำนวนเต็มเป็นตัวเลขที่ไม่ใช่เลขฐานสิบระหว่าง -2147483648 ถึง 2147483647 ในระบบ 32 บิต และระหว่าง -9223372036854775808 
ถึง 9223372036854775807 ในระบบ 64 บิต ค่าที่มากกว่า (หรือต่ำกว่า) จะถูกจัดเก็บเป็นแบบทศนิยม เนื่องจากมีค่าเกินขีดจำกัดของจำนวนเต็ม</p>";
echo "<font color='#330099'><p>หมายเหตุ:สิ่งสำคัญอีกประการที่ควรทราบคือ แม้ว่า 4 * 2.5 จะเป็น 10 ผลลัพธ์จะถูกจัดเก็บเป็นทศนิยม เนื่องจากหนึ่งในตัวถูกดำเนินการเป็นทศนิยม (2.5)</p>";
echo "<font color='#330000'><p>ต่อไปนี้เป็นกฎสำหรับจำนวนเต็ม:</p>";
echo "<font color='#330000'><p>- จำนวนเต็มต้องมีอย่างน้อยหนึ่งหลัก</p>";
echo "<font color='#330000'><p>- จำนวนเต็มต้องไม่มีจุดทศนิยม</p>";
echo "<font color='#330000'><p>- จำนวนเต็มสามารถเป็นค่าบวกหรือค่าลบก็ได้</p>";
echo "<font color='#330000'><p>- สามารถระบุจำนวนเต็มได้ในสามรูปแบบ: เลขฐานสิบ (ฐาน 10), เลขฐานสิบหก (ฐาน 16 - นำหน้าด้วย 0x) หรือฐานแปด (ฐาน 8 - นำหน้าด้วย 0)</p>";

echo "<font color='#330000'><p>PHP : มีค่าคงที่ที่กำหนดไว้ล่วงหน้าต่อไปนี้สำหรับจำนวนเต็ม</p>";
echo "<font color='#330000'><p>- PHP_INT_MAX - รองรับจำนวนเต็มสูงสุด</p>";
echo "<font color='#330000'><p>- PHP_INT_MIN - รองรับจำนวนเต็มที่น้อยที่สุด</p>";
echo "<font color='#330000'><p>- PHP_INT_SIZE - ขนาดของจำนวนเต็มเป็นไบต์</p>";

//
echo "<font color='#330000'><p>PHP : PHP มีฟังก์ชันต่อไปนี้เพื่อตรวจสอบว่าตัวแปรเป็นจำนวนเต็มหรือไม่:</p>";
echo "<font color='#330000'><p>- is_int()</p>";
echo "<font color='#330000'><p>- is_integer() - นามแฝงของ is_int()</p>";
echo "<font color='#330000'><p>- is_long() - นามแฝงของ is_int()</p>";
$x = 5985;
var_dump(is_int($x));
$x = 59.85;
var_dump(is_int($x));
echo "<br><img src='img/N1.jpg'>";

//
echo "<font color='#330000'><h1>PHP ลอยตัว</h1>";
echo "<font color='#330000'>ทศนิยมคือตัวเลขที่มีจุดทศนิยมหรือตัวเลขในรูปแบบเลขชี้กำลัง</p>";
echo "<font color='#330000'>2.0, 256.4, 10.358, 7.64E+5, 5.56E-5 เป็นแบบลอยตัวทั้งหมด</p>";
echo "<font color='#330000'>ประเภทข้อมูลลอยโดยทั่วไปสามารถจัดเก็บค่าได้สูงถึง 1.7976931348623E+308 (ขึ้นอยู่กับแพลตฟอร์ม) และมีความแม่นยำสูงสุด 14 หลัก</p>";
echo "<font color='#330000'>PHP มีค่าคงที่ที่กำหนดไว้ล่วงหน้าสำหรับการลอย (จาก PHP 7.2)</p>";
echo "<font color='#330000'> - PHP_FLOAT_MAX - จำนวนทศนิยมที่เป็นตัวแทนได้มากที่สุด</p>";
echo "<font color='#330000'> - PHP_FLOAT_MIN - จำนวนทศนิยมที่เป็นค่าบวกที่น้อยที่สุดที่สามารถแสดงได้</p>";
echo "<font color='#330000'> -  PHP_FLOAT_MAX - จำนวนทศนิยมเชิงลบที่เล็กที่สุดที่สามารถแสดงได้</p>";
echo "<font color='#330000'> - PHP_FLOAT_DIG - จำนวนหลักทศนิยมที่สามารถปัดเศษเป็นทศนิยมและย้อนกลับได้โดยไม่สูญเสียความแม่นยำ</p>";
echo "<font color='#330000'>PHP_FLOAT_EPSILON - จำนวนบวกที่น้อยที่สุดที่แทนได้ x ดังนั้น x + 1.0 != 1.0</p>";
echo "<font color='#330000'>PHP มีฟังก์ชันต่อไปนี้เพื่อตรวจสอบว่าตัวแปรเป็นประเภท float หรือไม่</p>";
echo "<font color='#330000'> - is_float() </p>";
echo "<font color='#330000'> - is_double() - นามแฝงของ is_float()</p>";
echo "<font color='#330000'>ตรวจสอบว่าประเภทของตัวแปรเป็นแบบ float หรือไม่</p>";
$x = 10.365;
var_dump(is_float($x));
echo "<br><img src='img/N2.jpg'>";

//
echo "<font color='#330000'><h1>PHP อินฟินิตี้</h1>";
echo "<font color='#330000'><p>ค่าตัวเลขที่มากกว่า PHP_FLOAT_MAX ถือว่าเป็นค่าอนันต์</p>";
echo "<font color='#330000'><p> - is_finite()</p>";
echo "<font color='#330000'><p> - is_infinite()</p>";
echo "<font color='#330000'><p>อย่างไรก็ตาม ฟังก์ชัน PHP var_dump() จะคืนค่าประเภทข้อมูลและค่า</p>";
echo "<font color='#330000'><p>ตรวจสอบว่าค่าตัวเลขเป็นค่าจำกัดหรือค่าอนันต์</p>";
$x = 1.9e411;
var_dump($x);
echo "<br><img src='img/N3.jpg'>";

//
echo "<font color='#330000'><h1>PHP น่าน</h1>";
echo "<font color='#330000'><p>NaN ย่อมาจาก Not a Number</p>";
echo "<font color='#330000'><p>NaN ใช้สำหรับการดำเนินการทางคณิตศาสตร์ที่เป็นไปไม่ได้</p>";
echo "<font color='#330000'><p>PHP มีฟังก์ชันต่อไปนี้เพื่อตรวจสอบว่าค่าไม่ใช่ตัวเลขหรือไม่</p>";
echo "<font color='#330000'><p>is_nan()</p>";
echo "<font color='#330000'><p>อย่างไรก็ตาม ฟังก์ชัน PHP var_dump() จะคืนค่าประเภทข้อมูลและค่า</p>";
echo "<font color='#330000'><p>การคำนวณที่ไม่ถูกต้องจะส่งกลับค่า NaN</p>";

$x = acos(8);
var_dump($x);
echo "<br><img src='img/N4.jpg'>";
echo "<font color='#330000'><h1>PHP สตริงตัวเลข</h1>";
echo "<font color='#330000'><p> ฟังก์ชัน PHP is_numeric() สามารถใช้ค้นหาว่าตัวแปรเป็นตัวเลขหรือไม่ ฟังก์ชันส่งคืนค่าจริงหากตัวแปรเป็นตัวเลขหรือสตริงตัวเลข หากเป็นเท็จมิฉะนั้น</p>";
echo "<font color='#330000'><p>ตรวจสอบว่าตัวแปรเป็นตัวเลขหรือไม่</p>";
$x = 5985;
var_dump(is_numeric($x));
$x = "5985";
var_dump(is_numeric($x));
$x = "59.85" + 100;
var_dump(is_numeric($x));
$x = "Hello";
var_dump(is_numeric($x));
echo "<br><img src='img/N5.jpg'>";

//
echo "<font color='#330000'><h1>PHP หล่อสตริงและลอยเป็นจำนวนเต็ม</h1>";
echo "<font color='#330000'><p>บางครั้งคุณจำเป็นต้องโยนค่าตัวเลขลงในประเภทข้อมูลอื่น</p>";
echo "<font color='#330000'><p>ฟังก์ชัน (int), (จำนวนเต็ม) หรือ intval() มักใช้เพื่อแปลงค่าเป็นจำนวนเต็ม</p>";
echo "<font color='#330000'><p>โยนทศนิยมและสตริงเป็นจำนวนเต็ม</p>";
// Cast float to int
$x = 23465.768;
$int_cast = (int)$x;
echo $int_cast;
echo "<br>";
// Cast string to int
$x = "23465.768";
$int_cast = (int)$x;
echo $int_cast;
echo "<br><img src='img/N6.jpg'>";

?>